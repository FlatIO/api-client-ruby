=begin
#Flat API

#The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 

The version of the OpenAPI document: 2.20.0
Contact: developers@flat.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module FlatApi
  # The context of the comment (for inline/contextualized comments). A context will include all the information related to the location of the comment (i.e. score parts, range of measure, time position). 
  class ScoreCommentContext
    # The unique identifier (UUID) of the score part
    attr_accessor :part_uuid

    # (Deprecated, use `staffUuid`) The identififer of the staff
    attr_accessor :staff_idx

    # The unique identififer (UUID) of the staff
    attr_accessor :staff_uuid

    # The list of measure UUIds
    attr_accessor :measure_uuids

    attr_accessor :start_time_pos

    attr_accessor :stop_time_pos

    attr_accessor :start_dpq

    attr_accessor :stop_dpq

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'part_uuid' => :'partUuid',
        :'staff_idx' => :'staffIdx',
        :'staff_uuid' => :'staffUuid',
        :'measure_uuids' => :'measureUuids',
        :'start_time_pos' => :'startTimePos',
        :'stop_time_pos' => :'stopTimePos',
        :'start_dpq' => :'startDpq',
        :'stop_dpq' => :'stopDpq'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'part_uuid' => :'String',
        :'staff_idx' => :'Float',
        :'staff_uuid' => :'String',
        :'measure_uuids' => :'Array<String>',
        :'start_time_pos' => :'Float',
        :'stop_time_pos' => :'Float',
        :'start_dpq' => :'Float',
        :'stop_dpq' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `FlatApi::ScoreCommentContext` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `FlatApi::ScoreCommentContext`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'part_uuid')
        self.part_uuid = attributes[:'part_uuid']
      else
        self.part_uuid = nil
      end

      if attributes.key?(:'staff_idx')
        self.staff_idx = attributes[:'staff_idx']
      end

      if attributes.key?(:'staff_uuid')
        self.staff_uuid = attributes[:'staff_uuid']
      end

      if attributes.key?(:'measure_uuids')
        if (value = attributes[:'measure_uuids']).is_a?(Array)
          self.measure_uuids = value
        end
      else
        self.measure_uuids = nil
      end

      if attributes.key?(:'start_time_pos')
        self.start_time_pos = attributes[:'start_time_pos']
      else
        self.start_time_pos = nil
      end

      if attributes.key?(:'stop_time_pos')
        self.stop_time_pos = attributes[:'stop_time_pos']
      else
        self.stop_time_pos = nil
      end

      if attributes.key?(:'start_dpq')
        self.start_dpq = attributes[:'start_dpq']
      else
        self.start_dpq = nil
      end

      if attributes.key?(:'stop_dpq')
        self.stop_dpq = attributes[:'stop_dpq']
      else
        self.stop_dpq = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @part_uuid.nil?
        invalid_properties.push('invalid value for "part_uuid", part_uuid cannot be nil.')
      end

      if @measure_uuids.nil?
        invalid_properties.push('invalid value for "measure_uuids", measure_uuids cannot be nil.')
      end

      if @start_time_pos.nil?
        invalid_properties.push('invalid value for "start_time_pos", start_time_pos cannot be nil.')
      end

      if @stop_time_pos.nil?
        invalid_properties.push('invalid value for "stop_time_pos", stop_time_pos cannot be nil.')
      end

      if @start_dpq.nil?
        invalid_properties.push('invalid value for "start_dpq", start_dpq cannot be nil.')
      end

      if @stop_dpq.nil?
        invalid_properties.push('invalid value for "stop_dpq", stop_dpq cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @part_uuid.nil?
      return false if @measure_uuids.nil?
      return false if @start_time_pos.nil?
      return false if @stop_time_pos.nil?
      return false if @start_dpq.nil?
      return false if @stop_dpq.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          part_uuid == o.part_uuid &&
          staff_idx == o.staff_idx &&
          staff_uuid == o.staff_uuid &&
          measure_uuids == o.measure_uuids &&
          start_time_pos == o.start_time_pos &&
          stop_time_pos == o.stop_time_pos &&
          start_dpq == o.start_dpq &&
          stop_dpq == o.stop_dpq
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [part_uuid, staff_idx, staff_uuid, measure_uuids, start_time_pos, stop_time_pos, start_dpq, stop_dpq].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = FlatApi.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
