=begin
#Flat API

#The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 

The version of the OpenAPI document: 2.20.0
Contact: developers@flat.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module FlatApi
  # Assignment Resource Editing
  class AssignmentUpdate
    attr_accessor :type

    # Title of the assignment
    attr_accessor :title

    # Description and content of the assignment
    attr_accessor :description

    attr_accessor :attachments

    # The number of playback authorized on the scores of the assignment.
    attr_accessor :nb_playback_authorized

    # The id of the toolset to apply to this assignment. The toolset will be copied to the assignment as a dedicated object to prevent unexpected changes when making modifications to the template toolset. This property can be set to null to delete the linked toolset and switch back to all the tools available for this assignment. 
    attr_accessor :toolset

    # The id of the cover to display
    attr_accessor :cover_file

    # The URL of the cover to display
    attr_accessor :cover

    # If set, the grading will be enabled for the assignement with this value as the maximum of points 
    attr_accessor :max_points

    # For worksheets, how grading will work for the assignment: - If set to `auto`, the grades will be automatically released when the student submits the submissions - If set to `manual`, the grades will only be set as `draftGrade` and will be released when the teacher returns the submissions 
    attr_accessor :release_grades

    # Mixing worksheets exercises for each student
    attr_accessor :shuffle_exercises

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'type' => :'type',
        :'title' => :'title',
        :'description' => :'description',
        :'attachments' => :'attachments',
        :'nb_playback_authorized' => :'nbPlaybackAuthorized',
        :'toolset' => :'toolset',
        :'cover_file' => :'coverFile',
        :'cover' => :'cover',
        :'max_points' => :'maxPoints',
        :'release_grades' => :'releaseGrades',
        :'shuffle_exercises' => :'shuffleExercises'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'type' => :'AssignmentType',
        :'title' => :'String',
        :'description' => :'String',
        :'attachments' => :'Array<ClassAttachmentCreation>',
        :'nb_playback_authorized' => :'Float',
        :'toolset' => :'String',
        :'cover_file' => :'String',
        :'cover' => :'String',
        :'max_points' => :'Float',
        :'release_grades' => :'String',
        :'shuffle_exercises' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'nb_playback_authorized',
        :'toolset',
        :'cover_file',
        :'cover',
        :'max_points',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `FlatApi::AssignmentUpdate` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `FlatApi::AssignmentUpdate`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'attachments')
        if (value = attributes[:'attachments']).is_a?(Array)
          self.attachments = value
        end
      end

      if attributes.key?(:'nb_playback_authorized')
        self.nb_playback_authorized = attributes[:'nb_playback_authorized']
      end

      if attributes.key?(:'toolset')
        self.toolset = attributes[:'toolset']
      end

      if attributes.key?(:'cover_file')
        self.cover_file = attributes[:'cover_file']
      end

      if attributes.key?(:'cover')
        self.cover = attributes[:'cover']
      end

      if attributes.key?(:'max_points')
        self.max_points = attributes[:'max_points']
      end

      if attributes.key?(:'release_grades')
        self.release_grades = attributes[:'release_grades']
      end

      if attributes.key?(:'shuffle_exercises')
        self.shuffle_exercises = attributes[:'shuffle_exercises']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@title.nil? && @title.to_s.length > 1000
        invalid_properties.push('invalid value for "title", the character length must be smaller than or equal to 1000.')
      end

      if !@title.nil? && @title.to_s.length < 1
        invalid_properties.push('invalid value for "title", the character length must be great than or equal to 1.')
      end

      if !@max_points.nil? && @max_points > 10000
        invalid_properties.push('invalid value for "max_points", must be smaller than or equal to 10000.')
      end

      if !@max_points.nil? && @max_points < 0
        invalid_properties.push('invalid value for "max_points", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@title.nil? && @title.to_s.length > 1000
      return false if !@title.nil? && @title.to_s.length < 1
      return false if !@max_points.nil? && @max_points > 10000
      return false if !@max_points.nil? && @max_points < 0
      release_grades_validator = EnumAttributeValidator.new('String', ["auto", "manual"])
      return false unless release_grades_validator.valid?(@release_grades)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] title Value to be assigned
    def title=(title)
      if title.nil?
        fail ArgumentError, 'title cannot be nil'
      end

      if title.to_s.length > 1000
        fail ArgumentError, 'invalid value for "title", the character length must be smaller than or equal to 1000.'
      end

      if title.to_s.length < 1
        fail ArgumentError, 'invalid value for "title", the character length must be great than or equal to 1.'
      end

      @title = title
    end

    # Custom attribute writer method with validation
    # @param [Object] max_points Value to be assigned
    def max_points=(max_points)
      if !max_points.nil? && max_points > 10000
        fail ArgumentError, 'invalid value for "max_points", must be smaller than or equal to 10000.'
      end

      if !max_points.nil? && max_points < 0
        fail ArgumentError, 'invalid value for "max_points", must be greater than or equal to 0.'
      end

      @max_points = max_points
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] release_grades Object to be assigned
    def release_grades=(release_grades)
      validator = EnumAttributeValidator.new('String', ["auto", "manual"])
      unless validator.valid?(release_grades)
        fail ArgumentError, "invalid value for \"release_grades\", must be one of #{validator.allowable_values}."
      end
      @release_grades = release_grades
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          type == o.type &&
          title == o.title &&
          description == o.description &&
          attachments == o.attachments &&
          nb_playback_authorized == o.nb_playback_authorized &&
          toolset == o.toolset &&
          cover_file == o.cover_file &&
          cover == o.cover &&
          max_points == o.max_points &&
          release_grades == o.release_grades &&
          shuffle_exercises == o.shuffle_exercises
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [type, title, description, attachments, nb_playback_authorized, toolset, cover_file, cover, max_points, release_grades, shuffle_exercises].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = FlatApi.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
