=begin
#Flat API

#The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 

The version of the OpenAPI document: 2.20.0
Contact: developers@flat.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module FlatApi
  class OrganizationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Count the organization users using the provided filters
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :role Filter users by role
    # @option opts [String] :q The query to search
    # @option opts [Array<String>] :group Filter users by group
    # @option opts [Boolean] :no_active_license Filter users who don&#39;t have an active license
    # @return [Array<UserDetailsAdmin>]
    def count_orga_users(opts = {})
      data, _status_code, _headers = count_orga_users_with_http_info(opts)
      data
    end

    # Count the organization users using the provided filters
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :role Filter users by role
    # @option opts [String] :q The query to search
    # @option opts [Array<String>] :group Filter users by group
    # @option opts [Boolean] :no_active_license Filter users who don&#39;t have an active license
    # @return [Array<(Array<UserDetailsAdmin>, Integer, Hash)>] Array<UserDetailsAdmin> data, response status code and response headers
    def count_orga_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationApi.count_orga_users ...'
      end
      allowable_values = ["user", "teacher", "admin"]
      if @api_client.config.client_side_validation && opts[:'role'] && !opts[:'role'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"role\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/organizations/users/count'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'role'] = @api_client.build_collection_param(opts[:'role'], :multi) if !opts[:'role'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'group'] = @api_client.build_collection_param(opts[:'group'], :multi) if !opts[:'group'].nil?
      query_params[:'noActiveLicense'] = opts[:'no_active_license'] if !opts[:'no_active_license'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UserDetailsAdmin>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"OrganizationApi.count_orga_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationApi#count_orga_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new couple of LTI 1.x credentials
    # Flat for Education is a Certified LTI Provider. You can use these API methods to automate the creation of LTI credentials. You can read more about our LTI implementation, supported components and LTI Endpoints in our [Developer Documentation](https://flat.io/developers/docs/lti/). 
    # @param body [LtiCredentialsCreation] 
    # @param [Hash] opts the optional parameters
    # @return [LtiCredentials]
    def create_lti_credentials(body, opts = {})
      data, _status_code, _headers = create_lti_credentials_with_http_info(body, opts)
      data
    end

    # Create a new couple of LTI 1.x credentials
    # Flat for Education is a Certified LTI Provider. You can use these API methods to automate the creation of LTI credentials. You can read more about our LTI implementation, supported components and LTI Endpoints in our [Developer Documentation](https://flat.io/developers/docs/lti/). 
    # @param body [LtiCredentialsCreation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LtiCredentials, Integer, Hash)>] LtiCredentials data, response status code and response headers
    def create_lti_credentials_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationApi.create_lti_credentials ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OrganizationApi.create_lti_credentials"
      end
      # resource path
      local_var_path = '/organizations/lti/credentials'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'LtiCredentials'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"OrganizationApi.create_lti_credentials",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationApi#create_lti_credentials\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new invitation to join the organization
    # This method creates and sends invitation for teachers and admins.  Invitations can only be used by new Flat users or users who are not part of the organization yet.  If the email of the user is already associated to a user of your organization, the API will simply update the role of the existing user and won't send an invitation. In this case, the property `usedBy` will be directly filled with the uniquer identifier of the corresponding user. 
    # @param body [OrganizationInvitationCreation] 
    # @param [Hash] opts the optional parameters
    # @return [OrganizationInvitation]
    def create_organization_invitation(body, opts = {})
      data, _status_code, _headers = create_organization_invitation_with_http_info(body, opts)
      data
    end

    # Create a new invitation to join the organization
    # This method creates and sends invitation for teachers and admins.  Invitations can only be used by new Flat users or users who are not part of the organization yet.  If the email of the user is already associated to a user of your organization, the API will simply update the role of the existing user and won&#39;t send an invitation. In this case, the property &#x60;usedBy&#x60; will be directly filled with the uniquer identifier of the corresponding user. 
    # @param body [OrganizationInvitationCreation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationInvitation, Integer, Hash)>] OrganizationInvitation data, response status code and response headers
    def create_organization_invitation_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationApi.create_organization_invitation ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OrganizationApi.create_organization_invitation"
      end
      # resource path
      local_var_path = '/organizations/invitations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationInvitation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"OrganizationApi.create_organization_invitation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationApi#create_organization_invitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new user account
    # @param body [UserCreation] 
    # @param [Hash] opts the optional parameters
    # @return [UserDetailsAdmin]
    def create_organization_user(body, opts = {})
      data, _status_code, _headers = create_organization_user_with_http_info(body, opts)
      data
    end

    # Create a new user account
    # @param body [UserCreation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserDetailsAdmin, Integer, Hash)>] UserDetailsAdmin data, response status code and response headers
    def create_organization_user_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationApi.create_organization_user ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OrganizationApi.create_organization_user"
      end
      # resource path
      local_var_path = '/organizations/users'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UserDetailsAdmin'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"OrganizationApi.create_organization_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationApi#create_organization_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a delegated API access token for an organization user
    # This operation will create an API access token for a chosen organization user. This token will be valid for a limited time and can be used to access the API as the organization user. 
    # @param user [String] Unique identifier of the Flat account 
    # @param organization_user_access_token_creation [OrganizationUserAccessTokenCreation] 
    # @param [Hash] opts the optional parameters
    # @return [ApiAccessToken]
    def create_organization_user_access_token(user, organization_user_access_token_creation, opts = {})
      data, _status_code, _headers = create_organization_user_access_token_with_http_info(user, organization_user_access_token_creation, opts)
      data
    end

    # Create a delegated API access token for an organization user
    # This operation will create an API access token for a chosen organization user. This token will be valid for a limited time and can be used to access the API as the organization user. 
    # @param user [String] Unique identifier of the Flat account 
    # @param organization_user_access_token_creation [OrganizationUserAccessTokenCreation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiAccessToken, Integer, Hash)>] ApiAccessToken data, response status code and response headers
    def create_organization_user_access_token_with_http_info(user, organization_user_access_token_creation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationApi.create_organization_user_access_token ...'
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling OrganizationApi.create_organization_user_access_token"
      end
      # verify the required parameter 'organization_user_access_token_creation' is set
      if @api_client.config.client_side_validation && organization_user_access_token_creation.nil?
        fail ArgumentError, "Missing the required parameter 'organization_user_access_token_creation' when calling OrganizationApi.create_organization_user_access_token"
      end
      # resource path
      local_var_path = '/organizations/users/{user}/accessToken'.sub('{' + 'user' + '}', CGI.escape(user.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(organization_user_access_token_creation)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiAccessToken'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"OrganizationApi.create_organization_user_access_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationApi#create_organization_user_access_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a sign in link for an organization user
    # @param user [String] Unique identifier of the Flat account 
    # @param user_signin_link_creation [UserSigninLinkCreation] 
    # @param [Hash] opts the optional parameters
    # @return [UserSigninLink]
    def create_organization_user_signin_link(user, user_signin_link_creation, opts = {})
      data, _status_code, _headers = create_organization_user_signin_link_with_http_info(user, user_signin_link_creation, opts)
      data
    end

    # Create a sign in link for an organization user
    # @param user [String] Unique identifier of the Flat account 
    # @param user_signin_link_creation [UserSigninLinkCreation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserSigninLink, Integer, Hash)>] UserSigninLink data, response status code and response headers
    def create_organization_user_signin_link_with_http_info(user, user_signin_link_creation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationApi.create_organization_user_signin_link ...'
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling OrganizationApi.create_organization_user_signin_link"
      end
      # verify the required parameter 'user_signin_link_creation' is set
      if @api_client.config.client_side_validation && user_signin_link_creation.nil?
        fail ArgumentError, "Missing the required parameter 'user_signin_link_creation' when calling OrganizationApi.create_organization_user_signin_link"
      end
      # resource path
      local_var_path = '/organizations/users/{user}/signinLink'.sub('{' + 'user' + '}', CGI.escape(user.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_signin_link_creation)

      # return_type
      return_type = opts[:debug_return_type] || 'UserSigninLink'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"OrganizationApi.create_organization_user_signin_link",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationApi#create_organization_user_signin_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List LTI 1.x credentials
    # @param [Hash] opts the optional parameters
    # @return [Array<LtiCredentials>]
    def list_lti_credentials(opts = {})
      data, _status_code, _headers = list_lti_credentials_with_http_info(opts)
      data
    end

    # List LTI 1.x credentials
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<LtiCredentials>, Integer, Hash)>] Array<LtiCredentials> data, response status code and response headers
    def list_lti_credentials_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationApi.list_lti_credentials ...'
      end
      # resource path
      local_var_path = '/organizations/lti/credentials'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<LtiCredentials>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"OrganizationApi.list_lti_credentials",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationApi#list_lti_credentials\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the organization invitations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :role Filter users by role
    # @option opts [Integer] :limit This is the maximum number of objects that may be returned (default to 50)
    # @option opts [String] :_next An opaque string cursor to fetch the next page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data. 
    # @option opts [String] :previous An opaque string cursor to fetch the previous page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data. 
    # @return [Array<OrganizationInvitation>]
    def list_organization_invitations(opts = {})
      data, _status_code, _headers = list_organization_invitations_with_http_info(opts)
      data
    end

    # List the organization invitations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :role Filter users by role
    # @option opts [Integer] :limit This is the maximum number of objects that may be returned (default to 50)
    # @option opts [String] :_next An opaque string cursor to fetch the next page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data. 
    # @option opts [String] :previous An opaque string cursor to fetch the previous page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data. 
    # @return [Array<(Array<OrganizationInvitation>, Integer, Hash)>] Array<OrganizationInvitation> data, response status code and response headers
    def list_organization_invitations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationApi.list_organization_invitations ...'
      end
      allowable_values = ["user", "teacher", "admin"]
      if @api_client.config.client_side_validation && opts[:'role'] && !allowable_values.include?(opts[:'role'])
        fail ArgumentError, "invalid value for \"role\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OrganizationApi.list_organization_invitations, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OrganizationApi.list_organization_invitations, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/organizations/invitations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'next'] = opts[:'_next'] if !opts[:'_next'].nil?
      query_params[:'previous'] = opts[:'previous'] if !opts[:'previous'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OrganizationInvitation>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"OrganizationApi.list_organization_invitations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationApi#list_organization_invitations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the organization users
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort The order to sort the user list
    # @option opts [String] :direction Sort direction
    # @option opts [String] :_next An opaque string cursor to fetch the next page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data. 
    # @option opts [String] :previous An opaque string cursor to fetch the previous page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data. 
    # @option opts [Array<String>] :role Filter users by role
    # @option opts [String] :q The query to search
    # @option opts [Array<String>] :group Filter users by group
    # @option opts [Boolean] :no_active_license Filter users who don&#39;t have an active license
    # @option opts [Array<String>] :license_expiration_date Filter users by license expiration date or &#x60;active&#x60; / &#x60;notActive&#x60;
    # @option opts [Boolean] :only_ids Return only user ids
    # @option opts [Integer] :limit This is the maximum number of objects that may be returned (default to 25)
    # @return [Array<UserDetailsAdmin>]
    def list_organization_users(opts = {})
      data, _status_code, _headers = list_organization_users_with_http_info(opts)
      data
    end

    # List the organization users
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort The order to sort the user list
    # @option opts [String] :direction Sort direction
    # @option opts [String] :_next An opaque string cursor to fetch the next page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data. 
    # @option opts [String] :previous An opaque string cursor to fetch the previous page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data. 
    # @option opts [Array<String>] :role Filter users by role
    # @option opts [String] :q The query to search
    # @option opts [Array<String>] :group Filter users by group
    # @option opts [Boolean] :no_active_license Filter users who don&#39;t have an active license
    # @option opts [Array<String>] :license_expiration_date Filter users by license expiration date or &#x60;active&#x60; / &#x60;notActive&#x60;
    # @option opts [Boolean] :only_ids Return only user ids
    # @option opts [Integer] :limit This is the maximum number of objects that may be returned (default to 25)
    # @return [Array<(Array<UserDetailsAdmin>, Integer, Hash)>] Array<UserDetailsAdmin> data, response status code and response headers
    def list_organization_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationApi.list_organization_users ...'
      end
      allowable_values = ["firstname", "lastname", "lastActivityDate", "licenseExpirationDate"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !opts[:'sort'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"sort\", must include one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      allowable_values = ["user", "teacher", "admin"]
      if @api_client.config.client_side_validation && opts[:'role'] && !opts[:'role'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"role\", must include one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OrganizationApi.list_organization_users, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OrganizationApi.list_organization_users, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/organizations/users'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'next'] = opts[:'_next'] if !opts[:'_next'].nil?
      query_params[:'previous'] = opts[:'previous'] if !opts[:'previous'].nil?
      query_params[:'role'] = @api_client.build_collection_param(opts[:'role'], :multi) if !opts[:'role'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'group'] = @api_client.build_collection_param(opts[:'group'], :multi) if !opts[:'group'].nil?
      query_params[:'noActiveLicense'] = opts[:'no_active_license'] if !opts[:'no_active_license'].nil?
      query_params[:'licenseExpirationDate'] = @api_client.build_collection_param(opts[:'license_expiration_date'], :multi) if !opts[:'license_expiration_date'].nil?
      query_params[:'onlyIds'] = opts[:'only_ids'] if !opts[:'only_ids'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UserDetailsAdmin>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"OrganizationApi.list_organization_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationApi#list_organization_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove an organization invitation
    # @param invitation [String] Unique identifier of the invitation
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_organization_invitation(invitation, opts = {})
      remove_organization_invitation_with_http_info(invitation, opts)
      nil
    end

    # Remove an organization invitation
    # @param invitation [String] Unique identifier of the invitation
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_organization_invitation_with_http_info(invitation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationApi.remove_organization_invitation ...'
      end
      # verify the required parameter 'invitation' is set
      if @api_client.config.client_side_validation && invitation.nil?
        fail ArgumentError, "Missing the required parameter 'invitation' when calling OrganizationApi.remove_organization_invitation"
      end
      # resource path
      local_var_path = '/organizations/invitations/{invitation}'.sub('{' + 'invitation' + '}', CGI.escape(invitation.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"OrganizationApi.remove_organization_invitation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationApi#remove_organization_invitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove an account from Flat
    # This operation removes an account from Flat and its data, including: * The music scores created by this user (documents, history, comments, collaboration information) * Education related data (assignments and classroom information) 
    # @param user [String] Unique identifier of the Flat account 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :convert_to_individual If &#x60;true&#x60;, the account will be only removed from the organization and converted into an individual account on our public website, https://flat.io. This operation will remove the education-related data from the account. Before realizing this operation, you need to be sure that the user is at least 13 years old and that this one has read and agreed to the Individual Terms of Services of Flat available on https://flat.io/legal. 
    # @return [nil]
    def remove_organization_user(user, opts = {})
      remove_organization_user_with_http_info(user, opts)
      nil
    end

    # Remove an account from Flat
    # This operation removes an account from Flat and its data, including: * The music scores created by this user (documents, history, comments, collaboration information) * Education related data (assignments and classroom information) 
    # @param user [String] Unique identifier of the Flat account 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :convert_to_individual If &#x60;true&#x60;, the account will be only removed from the organization and converted into an individual account on our public website, https://flat.io. This operation will remove the education-related data from the account. Before realizing this operation, you need to be sure that the user is at least 13 years old and that this one has read and agreed to the Individual Terms of Services of Flat available on https://flat.io/legal. 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_organization_user_with_http_info(user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationApi.remove_organization_user ...'
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling OrganizationApi.remove_organization_user"
      end
      # resource path
      local_var_path = '/organizations/users/{user}'.sub('{' + 'user' + '}', CGI.escape(user.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'convertToIndividual'] = opts[:'convert_to_individual'] if !opts[:'convert_to_individual'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"OrganizationApi.remove_organization_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationApi#remove_organization_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Revoke LTI 1.x credentials
    # @param credentials [String] Credentials unique identifier 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def revoke_lti_credentials(credentials, opts = {})
      revoke_lti_credentials_with_http_info(credentials, opts)
      nil
    end

    # Revoke LTI 1.x credentials
    # @param credentials [String] Credentials unique identifier 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def revoke_lti_credentials_with_http_info(credentials, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationApi.revoke_lti_credentials ...'
      end
      # verify the required parameter 'credentials' is set
      if @api_client.config.client_side_validation && credentials.nil?
        fail ArgumentError, "Missing the required parameter 'credentials' when calling OrganizationApi.revoke_lti_credentials"
      end
      # resource path
      local_var_path = '/organizations/lti/credentials/{credentials}'.sub('{' + 'credentials' + '}', CGI.escape(credentials.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"OrganizationApi.revoke_lti_credentials",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationApi#revoke_lti_credentials\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update account information
    # @param user [String] Unique identifier of the Flat account 
    # @param body [UserAdminUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [UserDetailsAdmin]
    def update_organization_user(user, body, opts = {})
      data, _status_code, _headers = update_organization_user_with_http_info(user, body, opts)
      data
    end

    # Update account information
    # @param user [String] Unique identifier of the Flat account 
    # @param body [UserAdminUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserDetailsAdmin, Integer, Hash)>] UserDetailsAdmin data, response status code and response headers
    def update_organization_user_with_http_info(user, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationApi.update_organization_user ...'
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling OrganizationApi.update_organization_user"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OrganizationApi.update_organization_user"
      end
      # resource path
      local_var_path = '/organizations/users/{user}'.sub('{' + 'user' + '}', CGI.escape(user.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UserDetailsAdmin'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"OrganizationApi.update_organization_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationApi#update_organization_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
