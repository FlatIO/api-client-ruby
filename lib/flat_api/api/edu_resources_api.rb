=begin
#Flat API

#The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 

The version of the OpenAPI document: 2.20.0
Contact: developers@flat.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module FlatApi
  class EduResourcesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Copy an education resource to a Resource Library
    # @param resource [String] Unique identifier of the resource
    # @param edu_resource_copy [EduResourceCopy] 
    # @param [Hash] opts the optional parameters
    # @return [EduResource]
    def copy_edu_resource(resource, edu_resource_copy, opts = {})
      data, _status_code, _headers = copy_edu_resource_with_http_info(resource, edu_resource_copy, opts)
      data
    end

    # Copy an education resource to a Resource Library
    # @param resource [String] Unique identifier of the resource
    # @param edu_resource_copy [EduResourceCopy] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EduResource, Integer, Hash)>] EduResource data, response status code and response headers
    def copy_edu_resource_with_http_info(resource, edu_resource_copy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EduResourcesApi.copy_edu_resource ...'
      end
      # verify the required parameter 'resource' is set
      if @api_client.config.client_side_validation && resource.nil?
        fail ArgumentError, "Missing the required parameter 'resource' when calling EduResourcesApi.copy_edu_resource"
      end
      # verify the required parameter 'edu_resource_copy' is set
      if @api_client.config.client_side_validation && edu_resource_copy.nil?
        fail ArgumentError, "Missing the required parameter 'edu_resource_copy' when calling EduResourcesApi.copy_edu_resource"
      end
      # resource path
      local_var_path = '/eduResources/{resource}/copy'.sub('{' + 'resource' + '}', CGI.escape(resource.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(edu_resource_copy)

      # return_type
      return_type = opts[:debug_return_type] || 'EduResource'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"EduResourcesApi.copy_edu_resource",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EduResourcesApi#copy_edu_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Copy an education assignment to a teacher demo class
    # Once a resource library can be published to a class (`Assignment.capabilities.canPublishInClass = true`), this endpoint can be used for the feature \"View as student\".  It will ensure the teacher has a demo class, then copy the assignment to the demo class. You can then use `POST /classes/{class}/testStudent` to create a testing student account in the demo class. 
    # @param resource [String] Unique identifier of the resource
    # @param [Hash] opts the optional parameters
    # @return [ClassAssignment]
    def copy_edu_resource_to_demo_class(resource, opts = {})
      data, _status_code, _headers = copy_edu_resource_to_demo_class_with_http_info(resource, opts)
      data
    end

    # Copy an education assignment to a teacher demo class
    # Once a resource library can be published to a class (&#x60;Assignment.capabilities.canPublishInClass &#x3D; true&#x60;), this endpoint can be used for the feature \&quot;View as student\&quot;.  It will ensure the teacher has a demo class, then copy the assignment to the demo class. You can then use &#x60;POST /classes/{class}/testStudent&#x60; to create a testing student account in the demo class. 
    # @param resource [String] Unique identifier of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClassAssignment, Integer, Hash)>] ClassAssignment data, response status code and response headers
    def copy_edu_resource_to_demo_class_with_http_info(resource, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EduResourcesApi.copy_edu_resource_to_demo_class ...'
      end
      # verify the required parameter 'resource' is set
      if @api_client.config.client_side_validation && resource.nil?
        fail ArgumentError, "Missing the required parameter 'resource' when calling EduResourcesApi.copy_edu_resource_to_demo_class"
      end
      # resource path
      local_var_path = '/eduResources/{resource}/copyToDemoClass'.sub('{' + 'resource' + '}', CGI.escape(resource.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ClassAssignment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"EduResourcesApi.copy_edu_resource_to_demo_class",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EduResourcesApi#copy_edu_resource_to_demo_class\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new education resource
    # @param edu_resource_creation [EduResourceCreation] 
    # @param [Hash] opts the optional parameters
    # @return [EduResource]
    def create_edu_resource(edu_resource_creation, opts = {})
      data, _status_code, _headers = create_edu_resource_with_http_info(edu_resource_creation, opts)
      data
    end

    # Create a new education resource
    # @param edu_resource_creation [EduResourceCreation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EduResource, Integer, Hash)>] EduResource data, response status code and response headers
    def create_edu_resource_with_http_info(edu_resource_creation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EduResourcesApi.create_edu_resource ...'
      end
      # verify the required parameter 'edu_resource_creation' is set
      if @api_client.config.client_side_validation && edu_resource_creation.nil?
        fail ArgumentError, "Missing the required parameter 'edu_resource_creation' when calling EduResourcesApi.create_edu_resource"
      end
      # resource path
      local_var_path = '/eduResources'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(edu_resource_creation)

      # return_type
      return_type = opts[:debug_return_type] || 'EduResource'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"EduResourcesApi.create_edu_resource",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EduResourcesApi#create_edu_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an LTI link for an education resource
    # This endpoint will return an LTI link that can be used to launch Flat for Education. The link, in a context from a class, will ensure the assignment has been copied in the class. 
    # @param resource [String] Unique identifier of the resource
    # @param [Hash] opts the optional parameters
    # @return [EduResourceLtiLink]
    def create_edu_resource_lti_link(resource, opts = {})
      data, _status_code, _headers = create_edu_resource_lti_link_with_http_info(resource, opts)
      data
    end

    # Create an LTI link for an education resource
    # This endpoint will return an LTI link that can be used to launch Flat for Education. The link, in a context from a class, will ensure the assignment has been copied in the class. 
    # @param resource [String] Unique identifier of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(EduResourceLtiLink, Integer, Hash)>] EduResourceLtiLink data, response status code and response headers
    def create_edu_resource_lti_link_with_http_info(resource, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EduResourcesApi.create_edu_resource_lti_link ...'
      end
      # verify the required parameter 'resource' is set
      if @api_client.config.client_side_validation && resource.nil?
        fail ArgumentError, "Missing the required parameter 'resource' when calling EduResourcesApi.create_edu_resource_lti_link"
      end
      # resource path
      local_var_path = '/eduResources/{resource}/createLtiLink'.sub('{' + 'resource' + '}', CGI.escape(resource.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EduResourceLtiLink'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"EduResourcesApi.create_edu_resource_lti_link",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EduResourcesApi#create_edu_resource_lti_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an education resource
    # @param resource [String] Unique identifier of the resource
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_edu_resource(resource, opts = {})
      delete_edu_resource_with_http_info(resource, opts)
      nil
    end

    # Delete an education resource
    # @param resource [String] Unique identifier of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_edu_resource_with_http_info(resource, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EduResourcesApi.delete_edu_resource ...'
      end
      # verify the required parameter 'resource' is set
      if @api_client.config.client_side_validation && resource.nil?
        fail ArgumentError, "Missing the required parameter 'resource' when calling EduResourcesApi.delete_edu_resource"
      end
      # resource path
      local_var_path = '/eduResources/{resource}'.sub('{' + 'resource' + '}', CGI.escape(resource.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"EduResourcesApi.delete_edu_resource",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EduResourcesApi#delete_edu_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an education resource
    # @param resource [String] Unique identifier of the resource
    # @param [Hash] opts the optional parameters
    # @return [EduResource]
    def get_edu_resource(resource, opts = {})
      data, _status_code, _headers = get_edu_resource_with_http_info(resource, opts)
      data
    end

    # Get an education resource
    # @param resource [String] Unique identifier of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(EduResource, Integer, Hash)>] EduResource data, response status code and response headers
    def get_edu_resource_with_http_info(resource, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EduResourcesApi.get_edu_resource ...'
      end
      # verify the required parameter 'resource' is set
      if @api_client.config.client_side_validation && resource.nil?
        fail ArgumentError, "Missing the required parameter 'resource' when calling EduResourcesApi.get_edu_resource"
      end
      # resource path
      local_var_path = '/eduResources/{resource}'.sub('{' + 'resource' + '}', CGI.escape(resource.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EduResource'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"EduResourcesApi.get_edu_resource",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EduResourcesApi#get_edu_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the education libraries
    # @param [Hash] opts the optional parameters
    # @return [Array<EduLibrary>]
    def list_edu_libraries(opts = {})
      data, _status_code, _headers = list_edu_libraries_with_http_info(opts)
      data
    end

    # List the education libraries
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<EduLibrary>, Integer, Hash)>] Array<EduLibrary> data, response status code and response headers
    def list_edu_libraries_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EduResourcesApi.list_edu_libraries ...'
      end
      # resource path
      local_var_path = '/eduResources/libraries'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<EduLibrary>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"EduResourcesApi.list_edu_libraries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EduResourcesApi#list_edu_libraries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List education resources in a library or folder
    # @param [Hash] opts the optional parameters
    # @option opts [String] :parent List the resources contained in this &#x60;parent&#x60; library or folder  (default to 'root')
    # @option opts [String] :type Filter the returned resources by type 
    # @option opts [String] :sort Sort (default to 'creationDate')
    # @option opts [String] :direction Sort direction
    # @option opts [Integer] :limit This is the maximum number of resources that may be returned (default to 25)
    # @option opts [String] :_next An opaque string cursor to fetch the next page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data. 
    # @option opts [String] :previous An opaque string cursor to fetch the previous page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data. 
    # @return [Array<EduResource>]
    def list_edu_resources(opts = {})
      data, _status_code, _headers = list_edu_resources_with_http_info(opts)
      data
    end

    # List education resources in a library or folder
    # @param [Hash] opts the optional parameters
    # @option opts [String] :parent List the resources contained in this &#x60;parent&#x60; library or folder  (default to 'root')
    # @option opts [String] :type Filter the returned resources by type 
    # @option opts [String] :sort Sort (default to 'creationDate')
    # @option opts [String] :direction Sort direction
    # @option opts [Integer] :limit This is the maximum number of resources that may be returned (default to 25)
    # @option opts [String] :_next An opaque string cursor to fetch the next page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data. 
    # @option opts [String] :previous An opaque string cursor to fetch the previous page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data. 
    # @return [Array<(Array<EduResource>, Integer, Hash)>] Array<EduResource> data, response status code and response headers
    def list_edu_resources_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EduResourcesApi.list_edu_resources ...'
      end
      allowable_values = ["assignment", "folder"]
      if @api_client.config.client_side_validation && opts[:'type'] && !allowable_values.include?(opts[:'type'])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      allowable_values = ["creationDate", "updateDate", "title"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling EduResourcesApi.list_edu_resources, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling EduResourcesApi.list_edu_resources, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/eduResources'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'parent'] = opts[:'parent'] if !opts[:'parent'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'next'] = opts[:'_next'] if !opts[:'_next'].nil?
      query_params[:'previous'] = opts[:'previous'] if !opts[:'previous'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<EduResource>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"EduResourcesApi.list_edu_resources",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EduResourcesApi#list_edu_resources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move an education resource
    # @param resource [String] Unique identifier of the resource
    # @param edu_resource_move [EduResourceMove] 
    # @param [Hash] opts the optional parameters
    # @return [EduResource]
    def move_edu_resource(resource, edu_resource_move, opts = {})
      data, _status_code, _headers = move_edu_resource_with_http_info(resource, edu_resource_move, opts)
      data
    end

    # Move an education resource
    # @param resource [String] Unique identifier of the resource
    # @param edu_resource_move [EduResourceMove] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EduResource, Integer, Hash)>] EduResource data, response status code and response headers
    def move_edu_resource_with_http_info(resource, edu_resource_move, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EduResourcesApi.move_edu_resource ...'
      end
      # verify the required parameter 'resource' is set
      if @api_client.config.client_side_validation && resource.nil?
        fail ArgumentError, "Missing the required parameter 'resource' when calling EduResourcesApi.move_edu_resource"
      end
      # verify the required parameter 'edu_resource_move' is set
      if @api_client.config.client_side_validation && edu_resource_move.nil?
        fail ArgumentError, "Missing the required parameter 'edu_resource_move' when calling EduResourcesApi.move_edu_resource"
      end
      # resource path
      local_var_path = '/eduResources/{resource}/move'.sub('{' + 'resource' + '}', CGI.escape(resource.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(edu_resource_move)

      # return_type
      return_type = opts[:debug_return_type] || 'EduResource'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"EduResourcesApi.move_edu_resource",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EduResourcesApi#move_edu_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an education resource metadata
    # Update any resources metadata (e.g. title).  Use this method to rename education resources folders or assignments. 
    # @param resource [String] Unique identifier of the resource
    # @param edu_resource_update [EduResourceUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [EduResource]
    def update_edu_resource(resource, edu_resource_update, opts = {})
      data, _status_code, _headers = update_edu_resource_with_http_info(resource, edu_resource_update, opts)
      data
    end

    # Update an education resource metadata
    # Update any resources metadata (e.g. title).  Use this method to rename education resources folders or assignments. 
    # @param resource [String] Unique identifier of the resource
    # @param edu_resource_update [EduResourceUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EduResource, Integer, Hash)>] EduResource data, response status code and response headers
    def update_edu_resource_with_http_info(resource, edu_resource_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EduResourcesApi.update_edu_resource ...'
      end
      # verify the required parameter 'resource' is set
      if @api_client.config.client_side_validation && resource.nil?
        fail ArgumentError, "Missing the required parameter 'resource' when calling EduResourcesApi.update_edu_resource"
      end
      # verify the required parameter 'edu_resource_update' is set
      if @api_client.config.client_side_validation && edu_resource_update.nil?
        fail ArgumentError, "Missing the required parameter 'edu_resource_update' when calling EduResourcesApi.update_edu_resource"
      end
      # resource path
      local_var_path = '/eduResources/{resource}'.sub('{' + 'resource' + '}', CGI.escape(resource.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(edu_resource_update)

      # return_type
      return_type = opts[:debug_return_type] || 'EduResource'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"EduResourcesApi.update_edu_resource",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EduResourcesApi#update_edu_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an education resource assignment
    # @param resource [String] Unique identifier of the resource
    # @param assignment_update [AssignmentUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Assignment]
    def update_edu_resource_assignment(resource, assignment_update, opts = {})
      data, _status_code, _headers = update_edu_resource_assignment_with_http_info(resource, assignment_update, opts)
      data
    end

    # Update an education resource assignment
    # @param resource [String] Unique identifier of the resource
    # @param assignment_update [AssignmentUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Assignment, Integer, Hash)>] Assignment data, response status code and response headers
    def update_edu_resource_assignment_with_http_info(resource, assignment_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EduResourcesApi.update_edu_resource_assignment ...'
      end
      # verify the required parameter 'resource' is set
      if @api_client.config.client_side_validation && resource.nil?
        fail ArgumentError, "Missing the required parameter 'resource' when calling EduResourcesApi.update_edu_resource_assignment"
      end
      # verify the required parameter 'assignment_update' is set
      if @api_client.config.client_side_validation && assignment_update.nil?
        fail ArgumentError, "Missing the required parameter 'assignment_update' when calling EduResourcesApi.update_edu_resource_assignment"
      end
      # resource path
      local_var_path = '/eduResources/{resource}/assignment'.sub('{' + 'resource' + '}', CGI.escape(resource.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(assignment_update)

      # return_type
      return_type = opts[:debug_return_type] || 'Assignment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"EduResourcesApi.update_edu_resource_assignment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EduResourcesApi#update_edu_resource_assignment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Use an education resource in a class
    # This endpoint will copy a resource and the underlying resources. The assignment will be created as a draft that can be completed with other options before publishing (e.g. due date, publication date for scheduling, etc.). 
    # @param resource [String] Unique identifier of the resource
    # @param edu_resource_use_in_class [EduResourceUseInClass] 
    # @param [Hash] opts the optional parameters
    # @return [ClassAssignment]
    def use_edu_resource_in_class(resource, edu_resource_use_in_class, opts = {})
      data, _status_code, _headers = use_edu_resource_in_class_with_http_info(resource, edu_resource_use_in_class, opts)
      data
    end

    # Use an education resource in a class
    # This endpoint will copy a resource and the underlying resources. The assignment will be created as a draft that can be completed with other options before publishing (e.g. due date, publication date for scheduling, etc.). 
    # @param resource [String] Unique identifier of the resource
    # @param edu_resource_use_in_class [EduResourceUseInClass] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClassAssignment, Integer, Hash)>] ClassAssignment data, response status code and response headers
    def use_edu_resource_in_class_with_http_info(resource, edu_resource_use_in_class, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EduResourcesApi.use_edu_resource_in_class ...'
      end
      # verify the required parameter 'resource' is set
      if @api_client.config.client_side_validation && resource.nil?
        fail ArgumentError, "Missing the required parameter 'resource' when calling EduResourcesApi.use_edu_resource_in_class"
      end
      # verify the required parameter 'edu_resource_use_in_class' is set
      if @api_client.config.client_side_validation && edu_resource_use_in_class.nil?
        fail ArgumentError, "Missing the required parameter 'edu_resource_use_in_class' when calling EduResourcesApi.use_edu_resource_in_class"
      end
      # resource path
      local_var_path = '/eduResources/{resource}/useInClass'.sub('{' + 'resource' + '}', CGI.escape(resource.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(edu_resource_use_in_class)

      # return_type
      return_type = opts[:debug_return_type] || 'ClassAssignment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"EduResourcesApi.use_edu_resource_in_class",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EduResourcesApi#use_edu_resource_in_class\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
