=begin
#Flat API

#The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 

The version of the OpenAPI document: 2.20.0
Contact: developers@flat.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'spec_helper'
require 'json'

# Unit tests for FlatApi::ClassApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ClassApi' do
  before do
    # run before each test
    @api_instance = FlatApi::ClassApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ClassApi' do
    it 'should create an instance of ClassApi' do
      expect(@api_instance).to be_instance_of(FlatApi::ClassApi)
    end
  end

  # unit tests for activate_class
  # Activate the class
  # Mark the class as &#x60;active&#x60;. This is mainly used for classes synchronized from Clever that are initially with an &#x60;inactive&#x60; state and hidden in the UI. 
  # @param _class Unique identifier of the class
  # @param [Hash] opts the optional parameters
  # @return [ClassDetails]
  describe 'activate_class test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for add_class_user
  # Add a user to the class
  # This method can be used by a teacher of the class to enroll another Flat user into the class.  Only users that are part of your Organization can be enrolled in a class of this same Organization.  When enrolling a user in the class, Flat will automatically add this user to the corresponding Class group, based on this role in the Organization. 
  # @param _class Unique identifier of the class
  # @param user Unique identifier of the user
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'add_class_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for archive_assignment
  # Archive the assignment
  # Archive the assignment 
  # @param _class Unique identifier of the class
  # @param assignment Unique identifier of the assignment
  # @param [Hash] opts the optional parameters
  # @return [Assignment]
  describe 'archive_assignment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for archive_class
  # Archive the class
  # Mark the class as &#x60;archived&#x60;. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated. 
  # @param _class Unique identifier of the class
  # @param [Hash] opts the optional parameters
  # @return [ClassDetails]
  describe 'archive_class test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for copy_assignment
  # Copy an assignment
  # Copy an assignment to a specified class or the resource library  For class assignments: - If the original assignment has a due date in the past, this new assignment will be created without a due date. - If the class is synchronized with an external app (e.g. Google Classroom), the copied assignment will also be posted on the external app. 
  # @param _class Unique identifier of the class
  # @param assignment Unique identifier of the assignment
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [AssignmentCopyResponse]
  describe 'copy_assignment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_class
  # Create a new class
  # Classrooms on Flat allow you to create activities with assignments and post content to a specific group.  When creating a class, Flat automatically creates two groups: one for the teachers of the course, one for the students. The creator of this class is automatically added to the teachers group.  If the classsroom is synchronized with another application like Google Classroom, some of the meta information will automatically be updated.  You can add users to this class using &#x60;PUT /classes/{class}/users/{user}&#x60;, they will automatically added to the group based on their role on Flat. Users can also enroll themselves to this class using &#x60;POST /classes/enroll/{enrollmentCode}&#x60; and the &#x60;enrollmentCode&#x60; returned in the &#x60;ClassDetails&#x60; response. 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [ClassDetails]
  describe 'create_class test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_class_assignment
  # Assignment creation
  # Use this method as a teacher to create and post a new assignment to a class.  If the class is synchronized with Google Classroom, the assignment will be automatically posted to your Classroom course. 
  # @param _class Unique identifier of the class
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [Assignment]
  describe 'create_class_assignment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_submission
  # Create or edit a submission
  # Use this method as a student to create, update and submit a submission related to an assignment. Students can only set &#x60;attachments&#x60; and &#x60;submit&#x60;. Teachers can use &#x60;PUT /classes/{class}/assignments/{assignment}/submissions/{submission}&#x60; to update a submission by id. 
  # @param _class Unique identifier of the class
  # @param assignment Unique identifier of the assignment
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [AssignmentSubmission]
  describe 'create_submission test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_test_student_account
  # Create a test student account
  # Test students account can be created by teachers an admin and be used to experiment the assignments.  - They are automatically added to the class. - They can be reset using this API endpoint (a new account will be created and the previous one scheduled for deletion). - These accounts don&#39;t use a user license. 
  # @param _class Unique identifier of the class
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :reset If true, the testing account will be re-created. 
  # @return [UserDetails]
  describe 'create_test_student_account test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_class_user
  # Remove a user from the class
  # This method can be used by a teacher to remove a user from the class, or by a student to leave the classroom.  Warning: Removing a user from the class will remove the associated resources, including the submissions and feedback related to these submissions. 
  # @param _class Unique identifier of the class
  # @param user Unique identifier of the user
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_class_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_submission
  # Reset a submission
  # Use this method as a teacher to reset a submission and allow student to start over the assignment 
  # @param _class Unique identifier of the class
  # @param assignment Unique identifier of the assignment
  # @param submission Unique identifier of the submission
  # @param [Hash] opts the optional parameters
  # @return [AssignmentSubmission]
  describe 'delete_submission test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_submission_comment
  # Delete a feedback comment to a submission
  # @param _class Unique identifier of the class
  # @param assignment Unique identifier of the assignment
  # @param submission Unique identifier of the submission
  # @param comment Unique identifier of the comment
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_submission_comment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for edit_submission
  # Edit a submission
  # Use this method as a teacher to update the different submission and give feedback. Teachers can only set &#x60;return&#x60;, &#x60;draftGrade&#x60; and &#x60;grade&#x60; 
  # @param _class Unique identifier of the class
  # @param assignment Unique identifier of the assignment
  # @param submission Unique identifier of the submission
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [AssignmentSubmission]
  describe 'edit_submission test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for enroll_class
  # Join a class
  # Use this method to join a class using an enrollment code given one of the teacher of this class. This code is also available in the &#x60;ClassDetails&#x60; returned to the teachers when creating the class or listing / fetching a specific class.  Flat will automatically add the user to the corresponding class group based on this role in the organization. 
  # @param enrollment_code The enrollment code, available to the teacher in &#x60;ClassDetails&#x60; 
  # @param [Hash] opts the optional parameters
  # @return [ClassDetails]
  describe 'enroll_class test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for export_submissions_reviews_as_csv
  # CSV Grades exports
  # Export list of submissions grades to a CSV file
  # @param _class Unique identifier of the class
  # @param assignment Unique identifier of the assignment
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'export_submissions_reviews_as_csv test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for export_submissions_reviews_as_excel
  # Excel Grades exports
  # Export list of submissions grades to an Excel file
  # @param _class Unique identifier of the class
  # @param assignment Unique identifier of the assignment
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'export_submissions_reviews_as_excel test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_class
  # Get the details of a single class
  # @param _class Unique identifier of the class
  # @param [Hash] opts the optional parameters
  # @return [ClassDetails]
  describe 'get_class test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_score_submissions
  # List submissions related to the score
  # This API call will list the different assignments submissions where the score is attached. This method can be used by anyone that are part of the organization and have at least read access to the document. 
  # @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;). 
  # @param [Hash] opts the optional parameters
  # @return [Array<AssignmentSubmission>]
  describe 'get_score_submissions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_submission
  # Get a student submission
  # @param _class Unique identifier of the class
  # @param assignment Unique identifier of the assignment
  # @param submission Unique identifier of the submission
  # @param [Hash] opts the optional parameters
  # @return [AssignmentSubmission]
  describe 'get_submission test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_submission_comments
  # List the feedback comments of a submission
  # @param _class Unique identifier of the class
  # @param assignment Unique identifier of the assignment
  # @param submission Unique identifier of the submission
  # @param [Hash] opts the optional parameters
  # @return [Array<AssignmentSubmissionComment>]
  describe 'get_submission_comments test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_submission_history
  # Get the history of the submission
  # For teachers only. Returns a detailed history of the submission. This currently includes state and grade histories. 
  # @param _class Unique identifier of the class
  # @param assignment Unique identifier of the assignment
  # @param submission Unique identifier of the submission
  # @param [Hash] opts the optional parameters
  # @return [Array<AssignmentSubmissionHistory>]
  describe 'get_submission_history test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_submissions
  # List the students&#39; submissions
  # @param _class Unique identifier of the class
  # @param assignment Unique identifier of the assignment
  # @param [Hash] opts the optional parameters
  # @return [Array<AssignmentSubmission>]
  describe 'get_submissions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_assignments
  # Assignments listing
  # @param _class Unique identifier of the class
  # @param [Hash] opts the optional parameters
  # @return [Array<ClassAssignment>]
  describe 'list_assignments test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_class_student_submissions
  # List the submissions for a student
  # Use this method as a teacher to list all the assignment submissions sent by a student of the class 
  # @param _class Unique identifier of the class
  # @param user Unique identifier of the user
  # @param [Hash] opts the optional parameters
  # @return [Array<AssignmentSubmission>]
  describe 'list_class_student_submissions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_classes
  # List the classes available for the current user
  # @param [Hash] opts the optional parameters
  # @option opts [String] :state Filter the classes by state
  # @return [Array<ClassDetails>]
  describe 'list_classes test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for post_submission_comment
  # Add a feedback comment to a submission
  # @param _class Unique identifier of the class
  # @param assignment Unique identifier of the assignment
  # @param submission Unique identifier of the submission
  # @param assignment_submission_comment_creation 
  # @param [Hash] opts the optional parameters
  # @return [AssignmentSubmissionComment]
  describe 'post_submission_comment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for unarchive_assignment
  # Unarchive the assignment.
  # Mark the assignment as &#x60;active&#x60;. 
  # @param _class Unique identifier of the class
  # @param assignment Unique identifier of the assignment
  # @param [Hash] opts the optional parameters
  # @return [Assignment]
  describe 'unarchive_assignment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for unarchive_class
  # Unarchive the class
  # Mark the class as &#x60;active&#x60;. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated. 
  # @param _class Unique identifier of the class
  # @param [Hash] opts the optional parameters
  # @return [ClassDetails]
  describe 'unarchive_class test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_class
  # Update the class
  # Update the meta information of the class 
  # @param _class Unique identifier of the class
  # @param body Details of the Class
  # @param [Hash] opts the optional parameters
  # @return [ClassDetails]
  describe 'update_class test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_submission_comment
  # Update a feedback comment to a submission
  # @param _class Unique identifier of the class
  # @param assignment Unique identifier of the assignment
  # @param submission Unique identifier of the submission
  # @param comment Unique identifier of the comment
  # @param assignment_submission_comment_creation 
  # @param [Hash] opts the optional parameters
  # @return [AssignmentSubmissionComment]
  describe 'update_submission_comment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
